<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
    http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd 
    http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd
    http://cern.ch/schema/MIG file:///usr/share/activemq/schema/MIG.xsd">

    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:${activemq.base}/conf/credentials.properties</value>
        </property>      
    </bean>

    <!-- 
        The <broker> element is used to configure the ActiveMQ broker.
        old: brokerName="localhost" dataDirectory="${activemq.base}/data"
    -->
    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="activemq_<%= @fqdn %>"
    useJmx="true" populateJMSXUserID="true" mbeanInvocationTimeout="600000" dataDirectory="${activemq.base}/data">

        <!-- enable virtual destinations without the VirtualTopic prefix, that is:
          * publish to /topic/something
          * consume from /queue/Consumer.foo.something
          * handle only locally-produced messages (https://issues.apache.org/jira/browse/AMQ-3550)
        -->

        <destinationInterceptors>
          <virtualDestinationInterceptor>
            <virtualDestinations>
              <virtualTopic name="&gt;" prefix="Consumer.*." local="true"/>
            </virtualDestinations>
          </virtualDestinationInterceptor>
        </destinationInterceptors>

        <!--
          For better performances use VM cursor and small memory limit.
          For more information, see:
            
          http://activemq.apache.org/message-cursors.html
            
          Also, if your producer is "hanging", it's probably due to producer 
          flow control.

          For more information, see:
          http://activemq.apache.org/producer-flow-control.html
        -->
              
        <destinationPolicy>
          <policyMap>
            <policyEntries>
              <policyEntry topic="grid.config.metricOutput.EGEE.&gt;" producerFlowControl="false" memoryLimit="1mb">
                <pendingSubscriberPolicy>
                  <fileCursor/>
                </pendingSubscriberPolicy>
                <subscriptionRecoveryPolicy>
                  <lastImageSubscriptionRecoveryPolicy/>
                </subscriptionRecoveryPolicy>
              </policyEntry>
              <policyEntry topic="&gt;" producerFlowControl="false" memoryLimit="1mb">
                <pendingSubscriberPolicy>
                  <fileCursor/>
                </pendingSubscriberPolicy>
              </policyEntry>
              <policyEntry queue="&gt;" producerFlowControl="false" memoryLimit="1mb">
                <networkBridgeFilterFactory>
                  <conditionalNetworkBridgeFilterFactory replayWhenNoConsumers="true" />
                </networkBridgeFilterFactory>
                <pendingQueuePolicy>
                  <fileQueueCursor/>
                </pendingQueuePolicy>
              </policyEntry>
            </policyEntries>
          </policyMap>
        </destinationPolicy>

        <!-- 
          The managementContext is used to configure how ActiveMQ is exposed in 
          JMX. By default, ActiveMQ uses the MBean server that is started by 
          the JVM. For more information, see: 
            
          http://activemq.apache.org/jmx.html 
        -->
        <managementContext>
            <managementContext allowRemoteAddressInMBeanNames="false" createConnector="false"/>
        </managementContext>

        <networkConnectors>
<% if @brokers_in_my_network -%>
  <% @brokers_in_my_network.each do |broker| -%>
          <networkConnector uri="static://(ssl://<%= broker %>:62001)"
                 name="network-<%= broker %>-62001"
                 suppressDuplicateQueueSubscriptions="true"
                 decreaseNetworkConsumerPriority="true"
                 dynamicOnly="true"
                 bridgeTempDestinations="false"
                 networkTTL="1">
            <dynamicallyIncludedDestinations>
              <topic physicalName="grid.&gt;"/>
              <topic physicalName="global.&gt;"/>
              <queue physicalName="grid.&gt;"/>
              <queue physicalName="global.&gt;"/>
              <queue physicalName="Consumer.*.grid.&gt;"/>
              <queue physicalName="Consumer.*.global.&gt;"/>
            </dynamicallyIncludedDestinations>
          </networkConnector>
  <% end -%>
<% end -%>
        </networkConnectors>

        <!-- 
          Configure message persistence for the broker. The default persistence
          mechanism is the KahaDB store (identified by the kahaDB tag). 
          For more information, see: 
            
          http://activemq.apache.org/persistence.html 
        -->
        <persistenceAdapter>
            <kahaDB directory="${activemq.base}/data/kahadb" enableJournalDiskSyncs="false" indexCacheSize="150000" indexWriteBatchSize="10000"/>
        </persistenceAdapter>
        
        <plugins>
          <!-- enable dual authentication (see http://fusesource.com/docs/broker/5.4/security/Auth-JAAS-DualAuthentPlugin.html) -->
          <jaasDualAuthenticationPlugin configuration="activemq-domain" sslConfiguration="activemq-ssl-domain"/>
          <!-- enforce some restrictions:
               * durable subscribers are forbidden
               * we keep track of the original destination for expired messages (bug workaround)
               * all messages have a maximum TTL of 3 days
          -->
          <restrictionPlugin xmlns="http://cern.ch/schema/MIG" durableSubscribers="false" originalDestination="true">
            <map>
              <restrictionMap>
                <defaultEntry>
                  <restrictionEntry messageTtl="259200000"/>
                </defaultEntry>
              </restrictionMap>
            </map>
          </restrictionPlugin>
        </plugins>
        
        <sslContext>
          <sslContext keyStore="file:${activemq.base}/conf/broker.ks" keyStorePassword="<%= scope.lookupvar('activemq::keystore_password') %>" 
                      trustStore="file:${activemq.base}/conf/broker.ts" trustStorePassword="<%= scope.lookupvar('activemq::truststore_password') %>"/>
        </sslContext>
   
        <systemUsage>
          <systemUsage sendFailIfNoSpace="true">
            <memoryUsage>
              <memoryUsage limit="512mb"/>
            </memoryUsage>
            <storeUsage>
              <storeUsage limit="6gb"/>
            </storeUsage>
            <tempUsage>
              <tempUsage limit="3gb"/>
            </tempUsage>
          </systemUsage>
        </systemUsage>
      
        <transportConnectors>
          <transportConnector name="nwob" uri="ssl://0.0.0.0:62001?jms.prefetchPolicy.all=1&amp;transport.closeAsync=false&amp;transport.needClientAuth=true"/>
          <transportConnector name="openwire" uri="tcp://0.0.0.0:6166?transport.closeAsync=false"/>
          <transportConnector name="openwire+ssl" uri="ssl://0.0.0.0:6167?transport.closeAsync=false&amp;transport.needClientAuth=true"/>
          <transportConnector name="stomp" uri="stomp://0.0.0.0:6163?transport.closeAsync=false&amp;transport.keepAlive=true&amp;transport.soLinger=1"/>
          <transportConnector name="stomp+ssl" uri="stomp+ssl://0.0.0.0:6162?transport.closeAsync=false&amp;transport.needClientAuth=true"/>
        </transportConnectors>

    </broker>

    <!-- 
      Enable web consoles, REST and Ajax APIs and demos
      It also includes Camel (with its web console), see ${ACTIVEMQ_HOME}/conf/camel.xml for more info
        
      Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details 
    -->
    <import resource="jetty.xml"/>
    
</beans>
